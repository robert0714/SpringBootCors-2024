package willydekeyser.config;

import java.io.IOException; 
import java.util.Optional;

import org.apache.tomcat.util.buf.StringUtils;
import org.springframework.util.AntPathMatcher;
import org.springframework.core.Ordered;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;

import jakarta.servlet.Filter;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.ServletRequest;
import jakarta.servlet.ServletResponse; 
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.util.ArrayList;
import java.util.Arrays; 
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

/***
 * When using Https , the browser will enforce CORS policy.<br/>
 * This filter will add the necessary headers to the response to allow the browser to accept the response.<br/>
 * 
**/
//@Component //uncomment this line to enable the filter for using Https
public class CorsFilter implements Filter {
    protected static final String CONTENT_SECURITY_POLICY = Optional.ofNullable(System.getenv("CONTENT_SECURITY_POLICY"))
            .orElse("default-src 'self'; script-src 'self' https://trusted-cdn.com 'sha256-4IiDsMH+GkJlxivIDNfi6qk0O5HPtzyvNwVT3Wt8TIw='; style-src 'self' https://trusted-cdn.com; img-src 'self' https://trusted-cdn.com data:; connect-src 'self' https://api.trusted.com; font-src 'self' https://fonts.gstatic.com; media-src 'self'; manifest-src 'self'; worker-src 'self'; form-action 'self'; frame-src 'self'; frame-ancestors 'self'; object-src 'none';");
   
    protected static final String ALLOWED_ALL = Optional.ofNullable(System.getenv("ALLOWED_ORIGINS"))
            .orElse(Optional.ofNullable(System.getProperty("web.cors.allowOrigins")).orElse("*"));
    
    private AntPathMatcher matcher = new AntPathMatcher();
    
    @Override
    public void doFilter(ServletRequest req, ServletResponse resp, FilterChain filterChain) throws IOException, ServletException {
        HttpServletResponse response = (HttpServletResponse) resp;
        HttpServletRequest request = (HttpServletRequest) req;
        String method = request.getMethod();
        String origin = request.getHeader("Origin");
        
		if (matchesOrigins(origin , ALLOWED_ALL)) {
			response.setHeader("Access-Control-Allow-Origin", origin);
		}
		
		response.setHeader("Access-Control-Allow-Methods", method);

        response.setHeader("Access-Control-Max-Age", "3600");
        
        
        Iterator<String> headerNames = request.getHeaderNames().asIterator();
        List<String> headerNamelList = new ArrayList<String>();
        headerNames.forEachRemaining(headerNamelList::add);
        String allowHeaders = StringUtils.join(headerNamelList ,',' );
        
        response.setHeader("Access-Control-Allow-Headers", allowHeaders);
        response.addHeader("Access-Control-Expose-Headers", "xsrf-token, Content-Disposition");

        response.setHeader("X-Content-Type-Options", "nosniff");
        response.setHeader("X-Frame-Options", "DENY");
        response.setHeader("X-XSS-Protection", "1; mode=block");
        response.setHeader("Content-Security-Policy", CONTENT_SECURITY_POLICY);

        if ("OPTIONS".equalsIgnoreCase(method)) {
            response.setStatus(HttpServletResponse.SC_OK);
        } else {
            filterChain.doFilter(req, resp);
        }
    }
    protected boolean matchesOrigins(final String requestOrigin , String allowedAll) {
    	Set<String> allowedOrigins = Optional.ofNullable(allowedAll)
                .map(origins -> Arrays.stream(origins.split(","))
                        .map(String::trim)
                        .filter(origin -> !origin.isEmpty())
                        .collect(Collectors.toSet()))
                .orElse(new HashSet<>());
    	
    	if (allowedOrigins.contains(requestOrigin)) {
    		return true;
    	}
    	for(String env:allowedOrigins) {
    		 if (matcher.match(env, requestOrigin)) {
    			 return true;
    		 }
    	}
    	return false ;    	
    }
}